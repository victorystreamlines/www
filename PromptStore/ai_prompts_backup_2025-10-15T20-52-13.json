{
  "exported_at": "10/15/2025, 11:52:13 PM",
  "total": 2,
  "prompts": [
    {
      "id": "1760561526269",
      "name": "u419999707_naif_2Tables_API_Oct 15",
      "prompt": "AI APPLICATION DEVELOPMENT PROMPT\n================================================================================\n\nUSER REQUEST:\nasdadasdasdads\n\n================================================================================\n\nDATABASE CONNECTION INFORMATION:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nConnection Name: u419999707_naif\nServer Type: Shared Hosting\nHost: srv1788.hstgr.io\nPort: 3306\nDatabase Name: u419999707_naif\nUsername: u419999707_essa\nPassword: P@master5007\nCharset: utf8mb4\nCollation: utf8mb4_unicode_ci\n\nCONNECTION CODE (PHP - PDO):\n```php\n$host = 'srv1788.hstgr.io';\n$port = '3306';\n$dbname = 'u419999707_naif';\n$username = 'u419999707_essa';\n$password = 'P@master5007';\n\n$dsn = \"mysql:host=$host;port=$port;dbname=$dbname;charset=utf8mb4\";\n$pdo = new PDO($dsn, $username, $password);\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n```\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nSELECTED TABLES (2):\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n1. TABLE: assets\n--------------------------------------------------------------------------------\n\nTotal Records: 10 rows\nTotal Columns: 12\nEngine: InnoDB\nCollation: utf8mb4_unicode_ci\nData Size: 16 KB\n\nCOLUMN STRUCTURE:\n   1. asset_id (int(11)) NOT NULL AUTO_INCREMENT [PRIMARY KEY]\n   2. asset_code (varchar(20)) NOT NULL [UNIQUE]\n   3. asset_name (varchar(100)) NOT NULL\n   4. category (varchar(50)) NULL\n   5. purchase_date (date) NULL\n   6. purchase_cost (decimal(15,2)) NULL\n   7. useful_life_years (int(11)) NULL\n   8. salvage_value (decimal(15,2)) NULL DEFAULT '0.00'\n   9. depreciation_method (varchar(20)) NULL DEFAULT 'STRAIGHT_LINE'\n   10. accumulated_depreciation (decimal(15,2)) NULL DEFAULT '0.00'\n   11. is_active (tinyint(1)) NULL DEFAULT '1'\n   12. created_at (timestamp) NULL DEFAULT 'current_timestamp()'\n\nSAMPLE DATA (First 3 rows):\n   Row 1: asset_id=1, asset_code=Sample asset_code 77, asset_name=Sample asset_name 42, category=Science, purchase_date=2024-02-06, purchase_cost=359.79, useful_life_years=1654, salvage_value=952.30, depreciation_method=Sample depreciation_, accumulated_depreciation=994.12, is_active=0, created_at=2022-07-09 22:23:15\n   Row 2: asset_id=2, asset_code=Sample asset_code 31, asset_name=Sample asset_name 515, category=Education, purchase_date=2023-08-24, purchase_cost=506.06, useful_life_years=7039, salvage_value=503.04, depreciation_method=Sample depreciation_, accumulated_depreciation=683.41, is_active=0, created_at=2022-07-21 18:06:19\n   Row 3: asset_id=3, asset_code=Sample asset_code 18, asset_name=Sample asset_name 623, category=Education, purchase_date=2023-11-29, purchase_cost=212.41, useful_life_years=6737, salvage_value=442.93, depreciation_method=Sample depreciation_, accumulated_depreciation=889.16, is_active=0, created_at=2024-12-21 06:08:37\n\n\n2. TABLE: bank_accounts\n--------------------------------------------------------------------------------\n\nTotal Records: 0 rows\nTotal Columns: 8\nEngine: InnoDB\nCollation: utf8mb4_unicode_ci\nData Size: 16 KB\n\nCOLUMN STRUCTURE:\n   1. bank_account_id (int(11)) NOT NULL AUTO_INCREMENT [PRIMARY KEY]\n   2. account_name (varchar(100)) NOT NULL\n   3. account_number (varchar(50)) NOT NULL\n   4. bank_name (varchar(100)) NOT NULL\n   5. account_type (varchar(20)) NULL\n   6. current_balance (decimal(15,2)) NULL DEFAULT '0.00'\n   7. is_active (tinyint(1)) NULL DEFAULT '1'\n   8. created_at (timestamp) NULL DEFAULT 'current_timestamp()'\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nDATABASE SUMMARY:\n- Total Selected Tables: 2\n- Total Columns Across Tables: 20\n- Total Records Across Tables: 10\n- Database Type: MySQL/MariaDB\n- Character Set: utf8mb4\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nAPPLICATION ARCHITECTURE:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔄 DOUBLE-PAGE API ARCHITECTURE (Backend + Frontend Separation)\n\nREQUIREMENT:\nGenerate TWO separate files with API-based communication.\n\nFILE 1 - BACKEND API: api.php\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nBACKEND REQUIREMENTS:\n1. Pure PHP API file (no HTML output)\n2. Connect to database using credentials provided above\n3. Handle API requests via POST/GET with 'action' parameter\n4. Respond with JSON format\n5. Include CORS headers for frontend communication\n6. Implement actions for ALL selected tables: assets, bank_accounts\n\nREQUIRED API ACTIONS (for each table):\n- list_[tablename] - Get all records with pagination\n- get_[tablename] - Get single record by ID\n- create_[tablename] - Insert new record\n- update_[tablename] - Update existing record\n- delete_[tablename] - Delete record\n- search_[tablename] - Search records\n\nEXAMPLE ACTIONS:\n- action=list_assets, action=create_assets, action=update_assets, action=delete_assets\n- action=list_bank_accounts, action=create_bank_accounts, action=update_bank_accounts, action=delete_bank_accounts\n\nSECURITY:\n- Use PDO prepared statements\n- Validate all inputs\n- Send proper HTTP response codes\n- Include error handling\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nFILE 2 - FRONTEND: index.html\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nFRONTEND REQUIREMENTS:\n1. Single HTML file with vanilla JavaScript (no frameworks)\n2. Modern, responsive UI design\n3. Use Fetch API to communicate with api.php\n4. Display data in tables/cards for all selected tables\n5. Include forms for CRUD operations\n6. Add loading indicators and error messages\n7. Handle API responses properly\n8. Use async/await for API calls\n\nAPI COMMUNICATION EXAMPLE:\n```javascript\nconst API_URL = 'api.php';\n\nasync function apiRequest(action, data = {}) {\n    const formData = new FormData();\n    formData.append('action', action);\n    for (const key in data) {\n        formData.append(key, data[key]);\n    }\n    \n    const response = await fetch(API_URL, {\n        method: 'POST',\n        body: formData\n    });\n    \n    return await response.json();\n}\n```\n\nUI SECTIONS NEEDED (for each table):\n- List view with pagination\n- Add new record form\n- Edit record form\n- Delete confirmation\n- Search functionality\n\nSTYLING:\n- Use modern CSS (flexbox/grid)\n- Responsive design\n- Professional color scheme\n- Smooth animations and transitions\n- Similar to this Hostinger Database Control Panel design\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nIMPORTANT: Generate BOTH files (api.php AND index.html) as separate, complete files.\nThe frontend should call the backend API for all database operations.\nThis is a TWO-PAGE architecture with API separation.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nAI INSTRUCTIONS:\n\nBased on the USER REQUEST above and using the database information provided:\n\n1. Use the exact database credentials shown above to establish connection\n2. Work with the selected tables: assets, bank_accounts\n3. Respect the column structures, data types, and constraints shown\n4. Use the sample data to understand data patterns and relationships\n5. Generate clean, production-ready code with proper error handling\n6. Include comments and documentation\n7. Follow best practices for security (prepared statements, input validation)\n8. Implement the features described in the USER REQUEST\n9. Generate TWO separate files:\n   - Backend API: api.php (handles all database operations)\n   - Frontend: index.html (vanilla JS + HTML, communicates via API)\n10. Use API architecture with JSON responses\n11. Frontend should use Fetch API to call backend\n\nIMPORTANT NOTES:\n- Primary keys are marked with [PRIMARY KEY]\n- Auto-increment columns should not be included in INSERT operations\n- Respect NOT NULL constraints\n- Use utf8mb4 charset for proper emoji and international character support\n- Connection parameters: host=srv1788.hstgr.io, port=3306, database=u419999707_naif\n- Create complete working application in TWO files (backend + frontend)\n- Backend returns JSON, Frontend displays UI\n\nNow, please implement the application according to the USER REQUEST while integrating with this database structure and following the specified architecture.\n\n================================================================================\nEND OF PROMPT\n================================================================================",
      "database": "u419999707_naif",
      "databaseId": "1760269168801",
      "tablesCount": 2,
      "tables": [
        "assets",
        "bank_accounts"
      ],
      "architecture": "Double-API",
      "createdAt": "2025-10-15T20:52:06.269Z",
      "size": 8504
    },
    {
      "id": "1760561488263",
      "name": "u419999707_naif1_1Tables_PHP_Oct 15",
      "prompt": "AI APPLICATION DEVELOPMENT PROMPT\n================================================================================\n\nUSER REQUEST:\nadsadsad\n\n================================================================================\n\nDATABASE CONNECTION INFORMATION:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nConnection Name: u419999707_naif1\nServer Type: Shared Hosting\nHost: srv1788.hstgr.io\nPort: 3306\nDatabase Name: u419999707_naif1\nUsername: u419999707_essa1\nPassword: P@master5007\nCharset: utf8mb4\nCollation: utf8mb4_unicode_ci\n\nCONNECTION CODE (PHP - PDO):\n```php\n$host = 'srv1788.hstgr.io';\n$port = '3306';\n$dbname = 'u419999707_naif1';\n$username = 'u419999707_essa1';\n$password = 'P@master5007';\n\n$dsn = \"mysql:host=$host;port=$port;dbname=$dbname;charset=utf8mb4\";\n$pdo = new PDO($dsn, $username, $password);\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n```\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nSELECTED TABLES (1):\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n1. TABLE: MyOrder\n--------------------------------------------------------------------------------\n\nTotal Records: 0 rows\nTotal Columns: 5\nEngine: InnoDB\nCollation: utf8mb4_unicode_ci\nData Size: 16 KB\n\nCOLUMN STRUCTURE:\n   1. id (int(11)) NOT NULL\n   2. user_id (int(11)) NOT NULL\n   3. total_amount (decimal(10,0)) NOT NULL\n   4. status (varchar(50)) NOT NULL DEFAULT 'pending'\n   5. created_at (timestamp) NOT NULL DEFAULT 'current_timestamp()'\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nDATABASE SUMMARY:\n- Total Selected Tables: 1\n- Total Columns Across Tables: 5\n- Total Records Across Tables: 0\n- Database Type: MySQL/MariaDB\n- Character Set: utf8mb4\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nAPPLICATION ARCHITECTURE:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📄 SINGLE-PHP PAGE (Direct Database Connection)\n\nREQUIREMENT:\nGenerate ONE complete PHP file that connects DIRECTLY to the database (no API layer).\n\nFILENAME: app.php\n\nSTRUCTURE REQUIREMENTS:\n1. Include database connection at the top using the credentials provided above\n2. All database operations (SELECT, INSERT, UPDATE, DELETE) should be in the SAME file\n3. Use PDO with prepared statements for security\n4. Include HTML output mixed with PHP (traditional PHP approach)\n5. Handle all CRUD operations for the selected tables: MyOrder\n6. Add proper error handling and validation\n7. Create a user-friendly interface with forms and data display\n8. No separate API file needed - everything in app.php\n\nEXAMPLE STRUCTURE:\n- Database connection section (top of file)\n- HTML DOCTYPE and head section\n- PHP logic for handling form submissions\n- HTML body with forms and data tables\n- Display data from selected tables\n- CRUD operations for each table\n\nThis is a SINGLE-PAGE application - all logic and display in ONE file.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nAI INSTRUCTIONS:\n\nBased on the USER REQUEST above and using the database information provided:\n\n1. Use the exact database credentials shown above to establish connection\n2. Work with the selected tables: MyOrder\n3. Respect the column structures, data types, and constraints shown\n4. Use the sample data to understand data patterns and relationships\n5. Generate clean, production-ready code with proper error handling\n6. Include comments and documentation\n7. Follow best practices for security (prepared statements, input validation)\n8. Implement the features described in the USER REQUEST\n9. Generate as SINGLE PHP file: app.php (all logic in one file)\n10. Use direct database connection (no API layer)\n\nIMPORTANT NOTES:\n- Primary keys are marked with [PRIMARY KEY]\n- Auto-increment columns should not be included in INSERT operations\n- Respect NOT NULL constraints\n- Use utf8mb4 charset for proper emoji and international character support\n- Connection parameters: host=srv1788.hstgr.io, port=3306, database=u419999707_naif1\n- Create complete working application in ONE PHP file\n\nNow, please implement the application according to the USER REQUEST while integrating with this database structure and following the specified architecture.\n\n================================================================================\nEND OF PROMPT\n================================================================================",
      "database": "u419999707_naif1",
      "databaseId": "1760269070992",
      "tablesCount": 1,
      "tables": [
        "MyOrder"
      ],
      "architecture": "Single-PHP",
      "createdAt": "2025-10-15T20:51:28.263Z",
      "size": 4489
    }
  ]
}