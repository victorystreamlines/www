{
  "exported_at": "10/15/2025, 2:26:11 AM",
  "total": 2,
  "prompts": [
    {
      "id": "1760484294165",
      "name": "u419999707_naif1_2Tables_PHP_Oct 15",
      "prompt": "Long name",
      "database": "u419999707_naif1",
      "databaseId": "1760269070992",
      "tablesCount": 2,
      "tables": [
        "Ordesr",
        "MyOrder"
      ],
      "architecture": "Single-PHP",
      "createdAt": "2025-10-14T23:24:54.166Z",
      "size": 9,
      "updatedAt": "2025-10-14T23:25:57.969Z"
    },
    {
      "id": "1760484223018",
      "name": "MoPrompt",
      "prompt": "AI APPLICATION DEVELOPMENT PROMPT\n================================================================================\n\nUSER REQUEST:\nprompt1\n\n================================================================================\n\nDATABASE CONNECTION INFORMATION:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nConnection Name: u419999707_Mohamed\nServer Type: Shared Hosting\nHost: srv1788.hstgr.io\nPort: 3306\nDatabase Name: u419999707_Mohamed\nUsername: u419999707_Abuammar\nPassword: P@master5007\nCharset: utf8mb4\nCollation: utf8mb4_unicode_ci\n\nCONNECTION CODE (PHP - PDO):\n```php\n$host = 'srv1788.hstgr.io';\n$port = '3306';\n$dbname = 'u419999707_Mohamed';\n$username = 'u419999707_Abuammar';\n$password = 'P@master5007';\n\n$dsn = \"mysql:host=$host;port=$port;dbname=$dbname;charset=utf8mb4\";\n$pdo = new PDO($dsn, $username, $password);\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n```\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nSELECTED TABLES (1):\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n1. TABLE: MyOrder_copy\n--------------------------------------------------------------------------------\n\nTotal Records: 10 rows\nTotal Columns: 5\nEngine: InnoDB\nCollation: utf8mb4_unicode_ci\nData Size: 16 KB\n\nCOLUMN STRUCTURE:\n   1. id (int(11)) NOT NULL\n   2. user_id (int(11)) NOT NULL\n   3. total_amount (decimal(10,0)) NOT NULL\n   4. status (varchar(50)) NOT NULL DEFAULT 'pending'\n   5. created_at (timestamp) NOT NULL DEFAULT 'current_timestamp()'\n\nSAMPLE DATA (First 3 rows):\n   Row 1: id=917, user_id=6630, total_amount=683, status=on_hold, created_at=2023-09-11 12:06:52\n   Row 2: id=1042, user_id=3272, total_amount=69, status=pending, created_at=2021-05-27 03:01:12\n   Row 3: id=7487, user_id=7245, total_amount=358, status=rejected, created_at=2022-11-23 10:54:10\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nDATABASE SUMMARY:\n- Total Selected Tables: 1\n- Total Columns Across Tables: 5\n- Total Records Across Tables: 10\n- Database Type: MySQL/MariaDB\n- Character Set: utf8mb4\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nAPPLICATION ARCHITECTURE:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔄 DOUBLE-PAGE API ARCHITECTURE (Backend + Frontend Separation)\n\nREQUIREMENT:\nGenerate TWO separate files with API-based communication.\n\nFILE 1 - BACKEND API: api.php\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nBACKEND REQUIREMENTS:\n1. Pure PHP API file (no HTML output)\n2. Connect to database using credentials provided above\n3. Handle API requests via POST/GET with 'action' parameter\n4. Respond with JSON format\n5. Include CORS headers for frontend communication\n6. Implement actions for ALL selected tables: MyOrder_copy\n\nREQUIRED API ACTIONS (for each table):\n- list_[tablename] - Get all records with pagination\n- get_[tablename] - Get single record by ID\n- create_[tablename] - Insert new record\n- update_[tablename] - Update existing record\n- delete_[tablename] - Delete record\n- search_[tablename] - Search records\n\nEXAMPLE ACTIONS:\n- action=list_MyOrder_copy, action=create_MyOrder_copy, action=update_MyOrder_copy, action=delete_MyOrder_copy\n\nSECURITY:\n- Use PDO prepared statements\n- Validate all inputs\n- Send proper HTTP response codes\n- Include error handling\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nFILE 2 - FRONTEND: index.html\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nFRONTEND REQUIREMENTS:\n1. Single HTML file with vanilla JavaScript (no frameworks)\n2. Modern, responsive UI design\n3. Use Fetch API to communicate with api.php\n4. Display data in tables/cards for all selected tables\n5. Include forms for CRUD operations\n6. Add loading indicators and error messages\n7. Handle API responses properly\n8. Use async/await for API calls\n\nAPI COMMUNICATION EXAMPLE:\n```javascript\nconst API_URL = 'api.php';\n\nasync function apiRequest(action, data = {}) {\n    const formData = new FormData();\n    formData.append('action', action);\n    for (const key in data) {\n        formData.append(key, data[key]);\n    }\n    \n    const response = await fetch(API_URL, {\n        method: 'POST',\n        body: formData\n    });\n    \n    return await response.json();\n}\n```\n\nUI SECTIONS NEEDED (for each table):\n- List view with pagination\n- Add new record form\n- Edit record form\n- Delete confirmation\n- Search functionality\n\nSTYLING:\n- Use modern CSS (flexbox/grid)\n- Responsive design\n- Professional color scheme\n- Smooth animations and transitions\n- Similar to this Hostinger Database Control Panel design\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nIMPORTANT: Generate BOTH files (api.php AND index.html) as separate, complete files.\nThe frontend should call the backend API for all database operations.\nThis is a TWO-PAGE architecture with API separation.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nAI INSTRUCTIONS:\n\nBased on the USER REQUEST above and using the database information provided:\n\n1. Use the exact database credentials shown above to establish connection\n2. Work with the selected tables: MyOrder_copy\n3. Respect the column structures, data types, and constraints shown\n4. Use the sample data to understand data patterns and relationships\n5. Generate clean, production-ready code with proper error handling\n6. Include comments and documentation\n7. Follow best practices for security (prepared statements, input validation)\n8. Implement the features described in the USER REQUEST\n9. Generate TWO separate files:\n   - Backend API: api.php (handles all database operations)\n   - Frontend: index.html (vanilla JS + HTML, communicates via API)\n10. Use API architecture with JSON responses\n11. Frontend should use Fetch API to call backend\n\nIMPORTANT NOTES:\n- Primary keys are marked with [PRIMARY KEY]\n- Auto-increment columns should not be included in INSERT operations\n- Respect NOT NULL constraints\n- Use utf8mb4 charset for proper emoji and international character support\n- Connection parameters: host=srv1788.hstgr.io, port=3306, database=u419999707_Mohamed\n- Create complete working application in TWO files (backend + frontend)\n- Backend returns JSON, Frontend displays UI\n\nNow, please implement the application according to the USER REQUEST while integrating with this database structure and following the specified architecture.\n\n================================================================================\nEND OF PROMPT\n================================================================================",
      "database": "u419999707_Mohamed",
      "databaseId": "1760268950894",
      "tablesCount": 1,
      "tables": [
        "MyOrder_copy"
      ],
      "architecture": "Double-API",
      "createdAt": "2025-10-14T23:23:43.018Z",
      "size": 6734
    }
  ]
}